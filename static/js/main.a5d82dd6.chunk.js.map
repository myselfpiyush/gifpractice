{"version":3,"sources":["Components/SearchForm.js","Components/Gif.js","Components/NoGifs.js","Components/GifList.js","Components/App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","useState","searchText","setSearchText","className","onSubmit","e","preventDefault","onSearch","currentTarget","reset","htmlFor","type","onChange","target","value","name","placeholder","id","Gif","src","url","alt","NoGifs","GifList","gifs","results","data","length","map","gif","images","fixed_height","key","App","setData","query","setQuery","isLoading","setIsLoading","useEffect","axios","get","then","response","catch","error","console","log","finally","Spinner","animation","variant","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"gQA+BeA,MA7Bf,SAAoBC,GAAQ,IAAD,EACWC,mBAAS,IADpB,mBAClBC,EADkB,KACNC,EADM,KAWzB,OACE,0BAAMC,UAAU,cAAcC,SAPX,SAACC,GACpBA,EAAEC,iBACFP,EAAMQ,SAASN,GACfI,EAAEG,cAAcC,UAKd,2BAAON,UAAU,YAAYO,QAAQ,UAArC,UAGA,2BACEC,KAAK,SACLC,SAfiB,SAACP,GAAD,OAAOH,EAAcG,EAAEQ,OAAOC,QAgB/CC,KAAK,SACLC,YAAY,cAEd,4BAAQL,KAAK,SAASM,GAAG,SAASd,UAAU,iBAC1C,uBAAGA,UAAU,6BAAb,aCjBOe,EANH,SAAAnB,GAAK,OACf,wBAAII,UAAU,YACZ,yBAAKgB,IAAKpB,EAAMqB,IAAKC,IAAI,OCKdC,EAPA,SAAAvB,GAAK,OAClB,wBAAII,UAAU,WACZ,uBAAGA,UAAU,2BAAb,+BACA,mECgBWoB,EAjBC,SAAAxB,GAEd,IACIyB,EADEC,EAAU1B,EAAM2B,KAQtB,OALEF,EADEC,EAAQE,OACHF,EAAQG,KAAI,SAAAC,GAAG,OAAI,kBAAC,EAAD,CAAKT,IAAKS,EAAIC,OAAOC,aAAaX,IAAKY,IAAKH,EAAIZ,QAEnE,kBAAC,EAAD,MAIP,wBAAId,UAAU,YACXqB,IC8BQS,MApCf,WAAgB,IAAD,EACWjC,mBAAS,IADpB,mBACN0B,EADM,KACAQ,EADA,OAEalC,mBAAS,QAFtB,mBAENmC,EAFM,KAECC,EAFD,OAGqBpC,oBAAS,GAH9B,mBAGNqC,EAHM,KAGKC,EAHL,KAiBb,OAVAC,qBAAU,WACRC,IACGC,IADH,0FAEuFN,EAFvF,mDAKGO,MAAK,SAACC,GAAD,OAAcT,EAAQS,EAASjB,KAAKA,SACzCkB,OAAM,SAACC,GAAD,OAAWC,QAAQC,IAAI,kCAAmCF,MAChEG,SAAQ,kBAAMV,GAAa,QAC7B,CAACH,IAEF,oCACE,yBAAKhC,UAAU,eACb,yBAAKA,UAAU,SACb,wBAAIA,UAAU,cAAd,aACA,kBAAC,EAAD,CAAYI,SAjBE,SAACO,GAAD,OAAWsB,EAAStB,QAoBtC,yBAAKX,UAAU,gBACZkC,EACC,kBAACY,EAAA,EAAD,CAASC,UAAU,SAASC,QAAQ,WAEpC,kBAAC,EAAD,CAASzB,KAAMA,OC3BL0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdtB,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMsB,c","file":"static/js/main.a5d82dd6.chunk.js","sourcesContent":["import React, { useState } from \"react\";\n\nfunction SearchForm(props) {\n  const [searchText, setSearchText] = useState(\"\");\n\n  const onSearchChange = (e) => setSearchText(e.target.value);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    props.onSearch(searchText);\n    e.currentTarget.reset();\n  };\n\n  return (\n    <form className=\"search-form\" onSubmit={handleSubmit}>\n      <label className=\"is-hidden\" htmlFor=\"search\">\n        Search\n      </label>\n      <input\n        type=\"search\"\n        onChange={onSearchChange}\n        name=\"search\"\n        placeholder=\"Search...\"\n      />\n      <button type=\"submit\" id=\"submit\" className=\"search-button\">\n        <i className=\"material-icons icn-search\">search</i>\n      </button>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from 'react';\n\nconst Gif = props => (\n  <li className=\"gif-wrap\">\n    <img src={props.url} alt=\"\"/>\n  </li>\n);\n\nexport default Gif;","import React from 'react';\n\nconst NoGifs = props => (\n  <li className='no-gifs'>\n    <i className=\"material-icons icon-gif\">sentiment_very_dissatisfied</i>\n    <h3>Sorry, no GIFs match your search.</h3>\n  </li>\n);\n\nexport default NoGifs;","import React from 'react';\nimport Gif from './Gif';\nimport NoGifs from './NoGifs';\n\nconst GifList = props => { \n  \n  const results = props.data;\n  let gifs;\n  if (results.length) {\n    gifs = results.map(gif => <Gif url={gif.images.fixed_height.url} key={gif.id} />);    \n  } else {\n    gifs = <NoGifs />\n  }\n\n  return(\n    <ul className=\"gif-list\">\n      {gifs}\n    </ul> \n  );\n}\n\nexport default GifList;\n","import React, { useState, useEffect } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nimport Spinner from \"react-bootstrap/Spinner\";\nimport \"../App.css\";\nimport axios from \"axios\";\n\nimport SearchForm from \"./SearchForm\";\nimport GifList from \"./GifList\";\n\nfunction App() {\n  const [data, setData] = useState([]);\n  const [query, setQuery] = useState(\"cats\");\n  const [isLoading, setIsLoading] = useState(true);\n\n  const performSearch = (value) => setQuery(value);\n\n  useEffect(() => {\n    axios\n      .get(\n        `https://api.giphy.com/v1/gifs/search?api_key=oSGTK1iVOTkexVLo5oR4M0uBu4qsjGmn&q=${query}&limit=100&offset=0&rating=g&lang=en\n        `\n      )\n      .then((response) => setData(response.data.data))\n      .catch((error) => console.log(\"Error fetching and parsing data\", error))\n      .finally(() => setIsLoading(false));\n  }, [query]);\n  return (\n    <>\n      <div className=\"main-header\">\n        <div className=\"inner\">\n          <h1 className=\"main-title\">GifSearch</h1>\n          <SearchForm onSearch={performSearch} />\n        </div>\n      </div>\n      <div className=\"main-content\">\n        {isLoading ? (\n          <Spinner animation=\"border\" variant=\"danger\" />\n        ) : (\n          <GifList data={data} />\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./Components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}